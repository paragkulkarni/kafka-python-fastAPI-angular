[
    {
        "label": "KafkaConsumer",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "KafkaProducer",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "pika",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pika",
        "description": "pika",
        "detail": "pika",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "get_connection",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "Word",
        "importPath": "models.word",
        "description": "models.word",
        "isExtraImport": true,
        "detail": "models.word",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "scoped_session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "authentication.auth_handler",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "authentication.auth_handler",
        "description": "authentication.auth_handler",
        "detail": "authentication.auth_handler",
        "documentation": {}
    },
    {
        "label": "authentication.auth_bearer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "authentication.auth_bearer",
        "description": "authentication.auth_bearer",
        "detail": "authentication.auth_bearer",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "rabbitmq.connect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "rabbitmq.connect",
        "description": "rabbitmq.connect",
        "detail": "rabbitmq.connect",
        "documentation": {}
    },
    {
        "label": "LikePost",
        "importPath": "models.likepost",
        "description": "models.likepost",
        "isExtraImport": true,
        "detail": "models.likepost",
        "documentation": {}
    },
    {
        "label": "consumer",
        "kind": 5,
        "importPath": "kafka-python.kconsumer",
        "description": "kafka-python.kconsumer",
        "peekOfCode": "consumer = KafkaConsumer('KafkaExplored', bootstrap_servers='localhost:9093')\nprint('****consumer-',consumer)\nprint('*************')\nfor msg in consumer:\n    topic = msg[0]\n    value = msg[6]\n    print(msg)\n    print(f\"{topic}:{value.decode()}\")",
        "detail": "kafka-python.kconsumer",
        "documentation": {}
    },
    {
        "label": "sendMessageToKafkaByProducer",
        "kind": 2,
        "importPath": "kafka-python.kproducer",
        "description": "kafka-python.kproducer",
        "peekOfCode": "def sendMessageToKafkaByProducer(usr,msg):\n    print(\"her*****e\")\n    the_dt = str(datetime.datetime.now(datetime.UTC))\n    user = usr\n    word = msg\n    sendObj = {\n        \"user\": user,\n        \"date\": the_dt,\n        \"word\": word,\n    }",
        "detail": "kafka-python.kproducer",
        "documentation": {}
    },
    {
        "label": "producer",
        "kind": 5,
        "importPath": "kafka-python.kproducer",
        "description": "kafka-python.kproducer",
        "peekOfCode": "producer = KafkaProducer(bootstrap_servers='localhost:9093')\ndef sendMessageToKafkaByProducer(usr,msg):\n    print(\"her*****e\")\n    the_dt = str(datetime.datetime.now(datetime.UTC))\n    user = usr\n    word = msg\n    sendObj = {\n        \"user\": user,\n        \"date\": the_dt,\n        \"word\": word,",
        "detail": "kafka-python.kproducer",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "kind": 6,
        "importPath": "vocamuch.authentication.auth_bearer",
        "description": "vocamuch.authentication.auth_bearer",
        "peekOfCode": "class JWTBearer(HTTPBearer):\n    def __init__(self, auto_error:bool = True):\n        super(JWTBearer, self).__init__(auto_error=auto_error)\n    async def __call__(self, request: Request):\n        credentials: HTTPAuthorizationCredentials = await super(JWTBearer, self).__call__(request)\n        print('credentials-',credentials, request.body)\n        if credentials:\n            if not credentials.scheme == \"Bearer\":\n                raise HTTPException(status_code=403, detail=\"Invalid authentication scheme.\")\n            if not self.verify_jwt(credentials.credentials):",
        "detail": "vocamuch.authentication.auth_bearer",
        "documentation": {}
    },
    {
        "label": "encoderToken",
        "kind": 2,
        "importPath": "vocamuch.authentication.auth_handler",
        "description": "vocamuch.authentication.auth_handler",
        "peekOfCode": "def encoderToken(user):\n    payload={\n        \"name\": user,\n        \"exp\": datetime.now(tz=timezone.utc) + timedelta(seconds=24*60*60)\n        }\n    encoded_data = jwt.encode(payload,\n                              key='secret',\n                              algorithm=\"HS256\")\n    return encoded_data\ndef decoderToken(token):",
        "detail": "vocamuch.authentication.auth_handler",
        "documentation": {}
    },
    {
        "label": "decoderToken",
        "kind": 2,
        "importPath": "vocamuch.authentication.auth_handler",
        "description": "vocamuch.authentication.auth_handler",
        "peekOfCode": "def decoderToken(token):\n    decoded_data = jwt.decode(jwt=token,\n                              key='secret',\n                              algorithms=[\"HS256\"])\n    print(\"csdsdsds233 \",decoded_data)\n    return decoded_data\ndef endTokenSession(user):\n    return {\"logout\": True}",
        "detail": "vocamuch.authentication.auth_handler",
        "documentation": {}
    },
    {
        "label": "endTokenSession",
        "kind": 2,
        "importPath": "vocamuch.authentication.auth_handler",
        "description": "vocamuch.authentication.auth_handler",
        "peekOfCode": "def endTokenSession(user):\n    return {\"logout\": True}",
        "detail": "vocamuch.authentication.auth_handler",
        "documentation": {}
    },
    {
        "label": "get_connection",
        "kind": 2,
        "importPath": "vocamuch.database.db",
        "description": "vocamuch.database.db",
        "peekOfCode": "def get_connection():\n    return create_engine(\n        url=\"postgresql://{0}:{1}@{2}:{3}/{4}\".format(\n            user, password, host, port, database\n        )\n    )\n# if __name__ == '__main__':\n#     try:\n#         # GET THE CONNECTION OBJECT (ENGINE) FOR THE DATABASE\n#         engine = get_connection()",
        "detail": "vocamuch.database.db",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "vocamuch.database.db",
        "description": "vocamuch.database.db",
        "peekOfCode": "user = 'root'\npassword = 'root'\nhost = '127.0.0.1'\nport = 5433\ndatabase = 'vocamuch'\n# PYTHON FUNCTION TO CONNECT TO THE POSTGRESQL DATABASE AND\n# RETURN THE SQLACHEMY ENGINE OBJECT\ndef get_connection():\n    return create_engine(\n        url=\"postgresql://{0}:{1}@{2}:{3}/{4}\".format(",
        "detail": "vocamuch.database.db",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "vocamuch.database.db",
        "description": "vocamuch.database.db",
        "peekOfCode": "password = 'root'\nhost = '127.0.0.1'\nport = 5433\ndatabase = 'vocamuch'\n# PYTHON FUNCTION TO CONNECT TO THE POSTGRESQL DATABASE AND\n# RETURN THE SQLACHEMY ENGINE OBJECT\ndef get_connection():\n    return create_engine(\n        url=\"postgresql://{0}:{1}@{2}:{3}/{4}\".format(\n            user, password, host, port, database",
        "detail": "vocamuch.database.db",
        "documentation": {}
    },
    {
        "label": "host",
        "kind": 5,
        "importPath": "vocamuch.database.db",
        "description": "vocamuch.database.db",
        "peekOfCode": "host = '127.0.0.1'\nport = 5433\ndatabase = 'vocamuch'\n# PYTHON FUNCTION TO CONNECT TO THE POSTGRESQL DATABASE AND\n# RETURN THE SQLACHEMY ENGINE OBJECT\ndef get_connection():\n    return create_engine(\n        url=\"postgresql://{0}:{1}@{2}:{3}/{4}\".format(\n            user, password, host, port, database\n        )",
        "detail": "vocamuch.database.db",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "vocamuch.database.db",
        "description": "vocamuch.database.db",
        "peekOfCode": "port = 5433\ndatabase = 'vocamuch'\n# PYTHON FUNCTION TO CONNECT TO THE POSTGRESQL DATABASE AND\n# RETURN THE SQLACHEMY ENGINE OBJECT\ndef get_connection():\n    return create_engine(\n        url=\"postgresql://{0}:{1}@{2}:{3}/{4}\".format(\n            user, password, host, port, database\n        )\n    )",
        "detail": "vocamuch.database.db",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "vocamuch.database.db",
        "description": "vocamuch.database.db",
        "peekOfCode": "database = 'vocamuch'\n# PYTHON FUNCTION TO CONNECT TO THE POSTGRESQL DATABASE AND\n# RETURN THE SQLACHEMY ENGINE OBJECT\ndef get_connection():\n    return create_engine(\n        url=\"postgresql://{0}:{1}@{2}:{3}/{4}\".format(\n            user, password, host, port, database\n        )\n    )\n# if __name__ == '__main__':",
        "detail": "vocamuch.database.db",
        "documentation": {}
    },
    {
        "label": "LikePost",
        "kind": 6,
        "importPath": "vocamuch.models.likepost",
        "description": "vocamuch.models.likepost",
        "peekOfCode": "class LikePost(BaseModel):\n    user_id : int\n    post_id: int \n    liked: int",
        "detail": "vocamuch.models.likepost",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "vocamuch.models.user",
        "description": "vocamuch.models.user",
        "peekOfCode": "class Item(BaseModel):\n    username: str\n    password: str",
        "detail": "vocamuch.models.user",
        "documentation": {}
    },
    {
        "label": "Word",
        "kind": 6,
        "importPath": "vocamuch.models.word",
        "description": "vocamuch.models.word",
        "peekOfCode": "class Word(BaseModel):\n    user_id: int\n    word: str\n    description: str",
        "detail": "vocamuch.models.word",
        "documentation": {}
    },
    {
        "label": "RabbitMQConnect",
        "kind": 6,
        "importPath": "vocamuch.rabbitmq.connect",
        "description": "vocamuch.rabbitmq.connect",
        "peekOfCode": "class RabbitMQConnect:\n    def __init__(self):\n        self.queue_name = rabbitmq[\"queue\"]\n        self.credentials = pika.PlainCredentials(rabbitmq['username'], rabbitmq['password'])\n        self.connection = pika.BlockingConnection(\n            pika.ConnectionParameters(host=rabbitmq['host'])\n            )\n        self.channel = self.connection.channel()\n        self.publish_queue = self.channel.queue_declare(queue=self.queue_name)\n        self.channel.basic_publish(exchange='', routing_key='hello', body='Hello World!')",
        "detail": "vocamuch.rabbitmq.connect",
        "documentation": {}
    },
    {
        "label": "rabbitmq",
        "kind": 5,
        "importPath": "vocamuch.rabbitmq.connect",
        "description": "vocamuch.rabbitmq.connect",
        "peekOfCode": "rabbitmq = {\n        \"host\": \"localhost\",\n        \"username\": \"guest\",\n        \"password\": \"guest\",\n        \"port\": \"5672\",\n        \"queue\": \"fastq\"\n    }\nclass RabbitMQConnect:\n    def __init__(self):\n        self.queue_name = rabbitmq[\"queue\"]",
        "detail": "vocamuch.rabbitmq.connect",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "vocamuch.main",
        "description": "vocamuch.main",
        "peekOfCode": "origins = [\n    \"http://localhost:4200\"\n]\napp = FastAPI(swagger_ui_parameters={\"syntaxHighlight\": True})\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=['*'],\n    allow_headers=['*']",
        "detail": "vocamuch.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "vocamuch.main",
        "description": "vocamuch.main",
        "peekOfCode": "app = FastAPI(swagger_ui_parameters={\"syntaxHighlight\": True})\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=['*'],\n    allow_headers=['*']\n)\nengine = get_connection()\nscoped_session = scoped_session(sessionmaker(bind=engine))",
        "detail": "vocamuch.main",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "vocamuch.main",
        "description": "vocamuch.main",
        "peekOfCode": "engine = get_connection()\nscoped_session = scoped_session(sessionmaker(bind=engine))\nsession = scoped_session()\n# rabbitMQ.RabbitMQConnect()\n@app.post(\"/user/\")\nasync def login(item: Item):\n    print(\"body\",item)\n    # q = \"SELECT enable FROM user_details where username='root' and pwd='root'\"\n    q = (\"SELECT enable,id FROM user_details where username='%s' and pwd='%s'\"%(item.username, item.password))\n    rs = session.execute(text(q))",
        "detail": "vocamuch.main",
        "documentation": {}
    },
    {
        "label": "scoped_session",
        "kind": 5,
        "importPath": "vocamuch.main",
        "description": "vocamuch.main",
        "peekOfCode": "scoped_session = scoped_session(sessionmaker(bind=engine))\nsession = scoped_session()\n# rabbitMQ.RabbitMQConnect()\n@app.post(\"/user/\")\nasync def login(item: Item):\n    print(\"body\",item)\n    # q = \"SELECT enable FROM user_details where username='root' and pwd='root'\"\n    q = (\"SELECT enable,id FROM user_details where username='%s' and pwd='%s'\"%(item.username, item.password))\n    rs = session.execute(text(q))\n    for r in rs.fetchall():",
        "detail": "vocamuch.main",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "vocamuch.main",
        "description": "vocamuch.main",
        "peekOfCode": "session = scoped_session()\n# rabbitMQ.RabbitMQConnect()\n@app.post(\"/user/\")\nasync def login(item: Item):\n    print(\"body\",item)\n    # q = \"SELECT enable FROM user_details where username='root' and pwd='root'\"\n    q = (\"SELECT enable,id FROM user_details where username='%s' and pwd='%s'\"%(item.username, item.password))\n    rs = session.execute(text(q))\n    for r in rs.fetchall():\n        print(\"2\",r)",
        "detail": "vocamuch.main",
        "documentation": {}
    }
]